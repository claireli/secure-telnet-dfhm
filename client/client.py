import telnetlib
import sys
import select
import os

class TelnetSecureClient:

  def __init__(self, host, port, private_key):
    self.d_host = host
    self.d_port = port
    self.timeout = 30

  def terminate_connection(self):
    print('Disconnecting from TCP tunnel. Destroying session key.')
    sys.exit(0)

  def connect(self):
    try:
      with telnetlib.Telnet(self.d_host, self.d_port, self.timeout) as session:
        EOT = b'\x04'
        #self.session_key = self.dfh.session_key(self.private)
        signal_from_server = session.read_until(EOT)
        print(signal_from_server.decode())

        # Two-way channel is now encrypted with our session key generated by the DFHM algorithm
        alive = True
        while alive:
          sockets_list = [sys.stdin, session.get_socket()]
          try:
            read_sockets, write_socket, error_socket = select.select(sockets_list,[],[])
          except KeyboardInterrupt:
            self.terminate_connection()

          for socks in read_sockets:
            # SocketKind.SOCK_STREAM is incoming broadcast
            if socks == session.get_socket():
              incoming_message = session.read_until(EOT)
              if incoming_message:
                os.system('clear||cls')
                print(incoming_message.decode())
            else:
              send_to_remote = input()

              # ASCII 29 is CTRL ], the character used for quit in vanilla telnet
              if len(send_to_remote) == 1 and (ord(send_to_remote) == 29 or ord(send_to_remote) == 3):
                alive = False
              elif send_to_remote == 'quit':
                alive = False
              else:
                #send_to_remote = self.encrypt(send_to_remote)
                session.write(send_to_remote.encode())
                # <bytes>

                #print("\n[" + self.d_host + "]: " + message.decode()[2:-1])
                #data_decrypted = self.decrypt(message)
                #print("[" + self.d_host + "]: " + data_decrypted)
                #print("\n[192.168.1.126]: " + message.decode()[2:-1])
                #data_decrypted = self.decrypt(message)
                #print("[192.168.1.126]: " + data_decrypted)
              #else:
                #alive=False
        self.terminate_connection()
    except ConnectionRefusedError as msg:
      print(f'ERROR: Target server is not online, {self.d_host}:{self.d_port}\n')
      print(msg)
      sys.exit(0)

if __name__ == '__main__':
    TSC = TelnetSecureClient('127.0.0.1', 9090, 'client.private.key')
    TSC.connect()
